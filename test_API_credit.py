from fastapi.testclient import TestClient
from API_credit import app 

client = TestClient(app)

# Test /shape POST endpoint : unique row shape
def test_data_shape():
    payload = {
        "data": [["1", "2", "3"]],
        "columns": ["col1", "col2", "col3"]
    }

    response = client.post("/data_shape", json=payload)
    
    assert response.status_code == 200
    assert response.json() == {
        "message": "Received your request!",
        "data_shape": [1, 3]
    }

# Test /shape POST endpoint : multiple rows shape
def test_data_shape_multiple_rows():
    payload = {
        "data": [["1", "2", "3"], ["4", "5", "6"]],
        "columns": ["col1", "col2", "col3"]
    }

    response = client.post("/data_shape", json=payload)
    
    assert response.status_code == 200
    assert response.json() == {
        "message": "Received your request!",
        "data_shape": [2, 3]
    }

# Test /predict POST endpoint :
# check prediction with a known payload and compare to the expected probabilities
def test_predict_endpoint():

    # Define reference payload to test
    payload = {
    "columns": [
    "SK_ID_CURR",
    "NAME_CONTRACT_TYPE",
    "FLAG_OWN_CAR",
    "FLAG_OWN_REALTY",
    "CNT_CHILDREN",
    "AMT_INCOME_TOTAL",
    "AMT_CREDIT",
    "AMT_ANNUITY",
    "AMT_GOODS_PRICE",
    "REGION_POPULATION_RELATIVE",
    "DAYS_BIRTH",
    "DAYS_EMPLOYED",
    "DAYS_REGISTRATION",
    "DAYS_ID_PUBLISH",
    "OWN_CAR_AGE",
    "FLAG_MOBIL",
    "FLAG_EMP_PHONE",
    "FLAG_WORK_PHONE",
    "FLAG_CONT_MOBILE",
    "FLAG_PHONE",
    "FLAG_EMAIL",
    "CNT_FAM_MEMBERS",
    "REGION_RATING_CLIENT",
    "REGION_RATING_CLIENT_W_CITY",
    "HOUR_APPR_PROCESS_START",
    "REG_REGION_NOT_LIVE_REGION",
    "REG_REGION_NOT_WORK_REGION",
    "LIVE_REGION_NOT_WORK_REGION",
    "REG_CITY_NOT_LIVE_CITY",
    "REG_CITY_NOT_WORK_CITY",
    "LIVE_CITY_NOT_WORK_CITY",
    "EXT_SOURCE_1_x",
    "EXT_SOURCE_2_x",
    "EXT_SOURCE_3_x",
    "APARTMENTS_AVG",
    "BASEMENTAREA_AVG",
    "YEARS_BEGINEXPLUATATION_AVG",
    "YEARS_BUILD_AVG",
    "COMMONAREA_AVG",
    "ELEVATORS_AVG",
    "ENTRANCES_AVG",
    "FLOORSMAX_AVG",
    "FLOORSMIN_AVG",
    "LANDAREA_AVG",
    "LIVINGAPARTMENTS_AVG",
    "LIVINGAREA_AVG",
    "NONLIVINGAPARTMENTS_AVG",
    "NONLIVINGAREA_AVG",
    "APARTMENTS_MODE",
    "BASEMENTAREA_MODE",
    "YEARS_BEGINEXPLUATATION_MODE",
    "YEARS_BUILD_MODE",
    "COMMONAREA_MODE",
    "ELEVATORS_MODE",
    "ENTRANCES_MODE",
    "FLOORSMAX_MODE",
    "FLOORSMIN_MODE",
    "LANDAREA_MODE",
    "LIVINGAPARTMENTS_MODE",
    "LIVINGAREA_MODE",
    "NONLIVINGAPARTMENTS_MODE",
    "NONLIVINGAREA_MODE",
    "APARTMENTS_MEDI",
    "BASEMENTAREA_MEDI",
    "YEARS_BEGINEXPLUATATION_MEDI",
    "YEARS_BUILD_MEDI",
    "COMMONAREA_MEDI",
    "ELEVATORS_MEDI",
    "ENTRANCES_MEDI",
    "FLOORSMAX_MEDI",
    "FLOORSMIN_MEDI",
    "LANDAREA_MEDI",
    "LIVINGAPARTMENTS_MEDI",
    "LIVINGAREA_MEDI",
    "NONLIVINGAPARTMENTS_MEDI",
    "NONLIVINGAREA_MEDI",
    "TOTALAREA_MODE",
    "OBS_30_CNT_SOCIAL_CIRCLE",
    "DEF_30_CNT_SOCIAL_CIRCLE",
    "OBS_60_CNT_SOCIAL_CIRCLE",
    "DEF_60_CNT_SOCIAL_CIRCLE",
    "DAYS_LAST_PHONE_CHANGE",
    "FLAG_DOCUMENT_2",
    "FLAG_DOCUMENT_3",
    "FLAG_DOCUMENT_4",
    "FLAG_DOCUMENT_5",
    "FLAG_DOCUMENT_6",
    "FLAG_DOCUMENT_7",
    "FLAG_DOCUMENT_8",
    "FLAG_DOCUMENT_9",
    "FLAG_DOCUMENT_10",
    "FLAG_DOCUMENT_11",
    "FLAG_DOCUMENT_12",
    "FLAG_DOCUMENT_13",
    "FLAG_DOCUMENT_14",
    "FLAG_DOCUMENT_15",
    "FLAG_DOCUMENT_16",
    "FLAG_DOCUMENT_17",
    "FLAG_DOCUMENT_18",
    "FLAG_DOCUMENT_19",
    "FLAG_DOCUMENT_20",
    "FLAG_DOCUMENT_21",
    "AMT_REQ_CREDIT_BUREAU_HOUR",
    "AMT_REQ_CREDIT_BUREAU_DAY",
    "AMT_REQ_CREDIT_BUREAU_WEEK",
    "AMT_REQ_CREDIT_BUREAU_MON",
    "AMT_REQ_CREDIT_BUREAU_QRT",
    "AMT_REQ_CREDIT_BUREAU_YEAR",
    "CODE_GENDER_F",
    "CODE_GENDER_M",
    "CODE_GENDER_XNA",
    "NAME_TYPE_SUITE_Children",
    "NAME_TYPE_SUITE_Family",
    "NAME_TYPE_SUITE_Group of people",
    "NAME_TYPE_SUITE_Other_A",
    "NAME_TYPE_SUITE_Other_B",
    "NAME_TYPE_SUITE_Spouse, partner",
    "NAME_TYPE_SUITE_Unaccompanied",
    "NAME_INCOME_TYPE_Businessman",
    "NAME_INCOME_TYPE_Commercial associate",
    "NAME_INCOME_TYPE_Maternity leave",
    "NAME_INCOME_TYPE_Pensioner",
    "NAME_INCOME_TYPE_State servant",
    "NAME_INCOME_TYPE_Student",
    "NAME_INCOME_TYPE_Unemployed",
    "NAME_INCOME_TYPE_Working",
    "NAME_EDUCATION_TYPE_Academic degree",
    "NAME_EDUCATION_TYPE_Higher education",
    "NAME_EDUCATION_TYPE_Incomplete higher",
    "NAME_EDUCATION_TYPE_Lower secondary",
    "NAME_EDUCATION_TYPE_Secondary / secondary special",
    "NAME_FAMILY_STATUS_Civil marriage",
    "NAME_FAMILY_STATUS_Married",
    "NAME_FAMILY_STATUS_Separated",
    "NAME_FAMILY_STATUS_Single / not married",
    "NAME_FAMILY_STATUS_Unknown",
    "NAME_FAMILY_STATUS_Widow",
    "NAME_HOUSING_TYPE_Co-op apartment",
    "NAME_HOUSING_TYPE_House / apartment",
    "NAME_HOUSING_TYPE_Municipal apartment",
    "NAME_HOUSING_TYPE_Office apartment",
    "NAME_HOUSING_TYPE_Rented apartment",
    "NAME_HOUSING_TYPE_With parents",
    "OCCUPATION_TYPE_Accountants",
    "OCCUPATION_TYPE_Cleaning staff",
    "OCCUPATION_TYPE_Cooking staff",
    "OCCUPATION_TYPE_Core staff",
    "OCCUPATION_TYPE_Drivers",
    "OCCUPATION_TYPE_HR staff",
    "OCCUPATION_TYPE_High skill tech staff",
    "OCCUPATION_TYPE_IT staff",
    "OCCUPATION_TYPE_Laborers",
    "OCCUPATION_TYPE_Low-skill Laborers",
    "OCCUPATION_TYPE_Managers",
    "OCCUPATION_TYPE_Medicine staff",
    "OCCUPATION_TYPE_Private service staff",
    "OCCUPATION_TYPE_Realty agents",
    "OCCUPATION_TYPE_Sales staff",
    "OCCUPATION_TYPE_Secretaries",
    "OCCUPATION_TYPE_Security staff",
    "OCCUPATION_TYPE_Waiters/barmen staff",
    "WEEKDAY_APPR_PROCESS_START_FRIDAY",
    "WEEKDAY_APPR_PROCESS_START_MONDAY",
    "WEEKDAY_APPR_PROCESS_START_SATURDAY",
    "WEEKDAY_APPR_PROCESS_START_SUNDAY",
    "WEEKDAY_APPR_PROCESS_START_THURSDAY",
    "WEEKDAY_APPR_PROCESS_START_TUESDAY",
    "WEEKDAY_APPR_PROCESS_START_WEDNESDAY",
    "ORGANIZATION_TYPE_Advertising",
    "ORGANIZATION_TYPE_Agriculture",
    "ORGANIZATION_TYPE_Bank",
    "ORGANIZATION_TYPE_Business Entity Type 1",
    "ORGANIZATION_TYPE_Business Entity Type 2",
    "ORGANIZATION_TYPE_Business Entity Type 3",
    "ORGANIZATION_TYPE_Cleaning",
    "ORGANIZATION_TYPE_Construction",
    "ORGANIZATION_TYPE_Culture",
    "ORGANIZATION_TYPE_Electricity",
    "ORGANIZATION_TYPE_Emergency",
    "ORGANIZATION_TYPE_Government",
    "ORGANIZATION_TYPE_Hotel",
    "ORGANIZATION_TYPE_Housing",
    "ORGANIZATION_TYPE_Industry: type 1",
    "ORGANIZATION_TYPE_Industry: type 10",
    "ORGANIZATION_TYPE_Industry: type 11",
    "ORGANIZATION_TYPE_Industry: type 12",
    "ORGANIZATION_TYPE_Industry: type 13",
    "ORGANIZATION_TYPE_Industry: type 2",
    "ORGANIZATION_TYPE_Industry: type 3",
    "ORGANIZATION_TYPE_Industry: type 4",
    "ORGANIZATION_TYPE_Industry: type 5",
    "ORGANIZATION_TYPE_Industry: type 6",
    "ORGANIZATION_TYPE_Industry: type 7",
    "ORGANIZATION_TYPE_Industry: type 8",
    "ORGANIZATION_TYPE_Industry: type 9",
    "ORGANIZATION_TYPE_Insurance",
    "ORGANIZATION_TYPE_Kindergarten",
    "ORGANIZATION_TYPE_Legal Services",
    "ORGANIZATION_TYPE_Medicine",
    "ORGANIZATION_TYPE_Military",
    "ORGANIZATION_TYPE_Mobile",
    "ORGANIZATION_TYPE_Other",
    "ORGANIZATION_TYPE_Police",
    "ORGANIZATION_TYPE_Postal",
    "ORGANIZATION_TYPE_Realtor",
    "ORGANIZATION_TYPE_Religion",
    "ORGANIZATION_TYPE_Restaurant",
    "ORGANIZATION_TYPE_School",
    "ORGANIZATION_TYPE_Security",
    "ORGANIZATION_TYPE_Security Ministries",
    "ORGANIZATION_TYPE_Self-employed",
    "ORGANIZATION_TYPE_Services",
    "ORGANIZATION_TYPE_Telecom",
    "ORGANIZATION_TYPE_Trade: type 1",
    "ORGANIZATION_TYPE_Trade: type 2",
    "ORGANIZATION_TYPE_Trade: type 3",
    "ORGANIZATION_TYPE_Trade: type 4",
    "ORGANIZATION_TYPE_Trade: type 5",
    "ORGANIZATION_TYPE_Trade: type 6",
    "ORGANIZATION_TYPE_Trade: type 7",
    "ORGANIZATION_TYPE_Transport: type 1",
    "ORGANIZATION_TYPE_Transport: type 2",
    "ORGANIZATION_TYPE_Transport: type 3",
    "ORGANIZATION_TYPE_Transport: type 4",
    "ORGANIZATION_TYPE_University",
    "ORGANIZATION_TYPE_XNA",
    "FONDKAPREMONT_MODE_not specified",
    "FONDKAPREMONT_MODE_org spec account",
    "FONDKAPREMONT_MODE_reg oper account",
    "FONDKAPREMONT_MODE_reg oper spec account",
    "HOUSETYPE_MODE_block of flats",
    "HOUSETYPE_MODE_specific housing",
    "HOUSETYPE_MODE_terraced house",
    "WALLSMATERIAL_MODE_Block",
    "WALLSMATERIAL_MODE_Mixed",
    "WALLSMATERIAL_MODE_Monolithic",
    "WALLSMATERIAL_MODE_Others",
    "WALLSMATERIAL_MODE_Panel",
    "WALLSMATERIAL_MODE_Stone, brick",
    "WALLSMATERIAL_MODE_Wooden",
    "EMERGENCYSTATE_MODE_No",
    "EMERGENCYSTATE_MODE_Yes",
    "DAYS_EMPLOYED_ANOM",
    "1",
    "EXT_SOURCE_1_y",
    "EXT_SOURCE_2_y",
    "EXT_SOURCE_3_y",
    "EXT_SOURCE_1^2",
    "EXT_SOURCE_1 EXT_SOURCE_2",
    "EXT_SOURCE_1 EXT_SOURCE_3",
    "EXT_SOURCE_1 DAYS_BIRTH",
    "EXT_SOURCE_2^2",
    "EXT_SOURCE_2 EXT_SOURCE_3",
    "EXT_SOURCE_2 DAYS_BIRTH",
    "EXT_SOURCE_3^2",
    "EXT_SOURCE_3 DAYS_BIRTH",
    "DAYS_BIRTH^2",
    "EXT_SOURCE_1^3",
    "EXT_SOURCE_1^2 EXT_SOURCE_2",
    "EXT_SOURCE_1^2 EXT_SOURCE_3",
    "EXT_SOURCE_1^2 DAYS_BIRTH",
    "EXT_SOURCE_1 EXT_SOURCE_2^2",
    "EXT_SOURCE_1 EXT_SOURCE_2 EXT_SOURCE_3",
    "EXT_SOURCE_1 EXT_SOURCE_2 DAYS_BIRTH",
    "EXT_SOURCE_1 EXT_SOURCE_3^2",
    "EXT_SOURCE_1 EXT_SOURCE_3 DAYS_BIRTH",
    "EXT_SOURCE_1 DAYS_BIRTH^2",
    "EXT_SOURCE_2^3",
    "EXT_SOURCE_2^2 EXT_SOURCE_3",
    "EXT_SOURCE_2^2 DAYS_BIRTH",
    "EXT_SOURCE_2 EXT_SOURCE_3^2",
    "EXT_SOURCE_2 EXT_SOURCE_3 DAYS_BIRTH",
    "EXT_SOURCE_2 DAYS_BIRTH^2",
    "EXT_SOURCE_3^3",
    "EXT_SOURCE_3^2 DAYS_BIRTH",
    "EXT_SOURCE_3 DAYS_BIRTH^2",
    "DAYS_BIRTH^3",
    "CREDIT_INCOME_PERCENT",
    "ANNUITY_INCOME_PERCENT",
    "CREDIT_TERM",
    "DAYS_EMPLOYED_PERCENT"
    ],
    "data": [[
    "100006",
    "0",
    "0",
    "1",
    "0",
    "135000.0",
    "312682.5",
    "29686.5",
    "297000.0",
    "0.008019",
    "19005",
    "3039.0",
    "9833.0",
    "2437",
    "nan",
    "1",
    "1",
    "0",
    "1",
    "0",
    "0",
    "2.0",
    "2",
    "2",
    "17",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "nan",
    "0.6504416904014653",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "2.0",
    "0.0",
    "2.0",
    "0.0",
    "617.0",
    "0",
    "1",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "nan",
    "True",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "True",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "True",
    "False",
    "False",
    "False",
    "False",
    "True",
    "True",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "True",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "True",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "True",
    "False",
    "False",
    "False",
    "False",
    "False",
    "True",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "False",
    "1.0",
    "0.5059979305057544",
    "0.6504416904014653",
    "0.5352762504724826",
    "0.2560339056761062",
    "0.329122149257806",
    "0.270848674987956",
    "9616.490669261862",
    "0.4230743926123156",
    "0.3481659891890797",
    "12361.644326079848",
    "0.2865206643198799",
    "10172.925140229532",
    "361190025.0",
    "0.1295526264114152",
    "0.1665351264080558",
    "0.1370488690241314",
    "4865.924377374399",
    "0.2140747671118107",
    "0.1761712700021631",
    "6254.966446644604",
    "0.1449788631929932",
    "5147.4790681461045",
    "182761405.1693217",
    "0.2751852230963277",
    "0.2264616745484433",
    "8040.528831597058",
    "0.1863649852351735",
    "6616.89462453846",
    "234933050.4171475",
    "0.1533677068800301",
    "5445.325225399319",
    "193336442.29006225",
    "6864416425125.0",
    "2.3161666666666667",
    "0.2199",
    "0.0949413542491185",
    "0.1599052880820836"]]
    }

    response = client.post("/predict", json=payload)
    
    assert response.status_code == 200
    result = response.json()
    prediction = result["predictions"][0]

    # Expected prediction from the model for the input data
    expected_prediction = [0.5014562771557, 0.49854372284430004]
    tolerance = 1e-5  # Acceptable error margin for float comparison

    # Check that each predicted probability equals to the expected value
    for pred, expected in zip(prediction, expected_prediction):
        assert abs(pred - expected) < tolerance
    